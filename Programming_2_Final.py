{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b41af5c6-2772-4d0c-8d9c-e6d18313c60e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "s = pd.read_csv('social_media_usage.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "27c017f3-b778-4219-83a8-413577282ce6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_sm(x): #function that returns a boolean for positive use\n",
    "    return np.where(x == 1, 1, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "530e5fed-e4ce-4319-96f4-1e27546b97ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = {'col1': [0, 1, 0], 'col2': [1, 0, 1]} #New dataframe to test\n",
    "toy_df = pd.DataFrame(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "679e16fd-5249-41ad-b456-28d259998881",
   "metadata": {},
   "outputs": [],
   "source": [
    "cleaned_df = toy_df.apply(clean_sm) #testing the new dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "59599d05-40a3-4352-ba10-d12751e31da1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original DataFrame:\n",
      "   col1  col2\n",
      "0     0     1\n",
      "1     1     0\n",
      "2     0     1\n",
      "\n",
      "Cleaned DataFrame:\n",
      "   col1  col2\n",
      "0     0     1\n",
      "1     1     0\n",
      "2     0     1\n"
     ]
    }
   ],
   "source": [
    "print(\"Original DataFrame:\")\n",
    "print(toy_df)\n",
    "\n",
    "print(\"\\nCleaned DataFrame:\")\n",
    "print(cleaned_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "99f44627-05c3-4ba5-8c1c-75f439be2297",
   "metadata": {},
   "outputs": [],
   "source": [
    "ss = s.assign(sm_li=lambda x: clean_sm(x['web1h'])) # creates a new column called 'sm_li' that tests whether the respondant is on linkedin\n",
    "ss = ss.dropna() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "47fd8339-ef51-4501-9c58-50f3c1844383",
   "metadata": {},
   "outputs": [],
   "source": [
    "ss['income'] = np.where((ss['income'] >= 1) & (ss['income'] <= 9), ss['income'], np.nan)\n",
    "ss['education'] = np.where((ss['educ2'] >= 1) & (ss['educ2'] <= 8), ss['educ2'], np.nan)\n",
    "ss['parent'] = np.where(ss['par'] == 1, 1, 0)\n",
    "ss['married'] = np.where(ss['marital'].isin([1, 2]), 1, 0)\n",
    "ss['female'] = np.where(ss['gender'] ==2,1, 0)\n",
    "ss['age'] = np.where((ss['age'] <= 98) & (ss['age'] >= 0), ss['age'], np.nan)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b15dadcc-d958-429a-92a2-562bf77f4a42",
   "metadata": {},
   "outputs": [],
   "source": [
    "ss = ss.dropna() #drops NA\n",
    "ss = ss[['income', 'education', 'parent', 'married', 'female', 'age', 'sm_li']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "42d42340-143f-4752-9d3f-c92e575033da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<bound method NDFrame.head of       income  education  parent  married  female   age  sm_li\n",
      "0        6.0        4.0       0        0       1  77.0      0\n",
      "1        5.0        3.0       0        0       0  59.0      0\n",
      "2        8.0        4.0       0        1       1  60.0      0\n",
      "3        8.0        8.0       0        0       0  73.0      0\n",
      "4        7.0        8.0       0        1       1  65.0      1\n",
      "...      ...        ...     ...      ...     ...   ...    ...\n",
      "1255     6.0        4.0       1        1       0  41.0      0\n",
      "1256     2.0        5.0       0        1       0  46.0      1\n",
      "1257     7.0        3.0       0        0       0  18.0      0\n",
      "1258     4.0        3.0       0        0       1  23.0      0\n",
      "1259     4.0        3.0       1        1       0  50.0      0\n",
      "\n",
      "[1260 rows x 7 columns]>\n"
     ]
    }
   ],
   "source": [
    "ss = ss.dropna() #drops NA\n",
    "print(ss.head)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1a5a7f8b-5dc1-4f8d-bb10-18b3a2e32b89",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkYAAAHoCAYAAACsIyBvAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABuu0lEQVR4nO3dd1QUVxsG8GcWYekgIEVFioUiVtAI9l6iSTSJLbE3YheNihp7xJjYYzd2v8Ro1ESjKLHFHkWxgRpRgwVEUUFR6s73B7jJussqusvI7vM7Z86RO3dm3llRXt57544giqIIIiIiIoJM6gCIiIiI3hVMjIiIiIjyMTEiIiIiysfEiIiIiCgfEyMiIiKifEyMiIiIiPIxMSIiIiLKx8SIiIiIKB8TIyIiIqJ8TIyI9OT8+fPo1asXvLy8YG5uDmtra9SsWROzZs3Cw4cPpQ5PxcGDByEIAg4ePFjoY2NjYzF58mTcvHlTbV/Pnj3h6en51vG9CUEQIAgCevbsqXH/1KlTlX00xf4qx44dw+TJk/H48eNCHefp6VlgTEQkPSZGRHqwYsUKBAYG4tSpU/jyyy8RGRmJbdu24dNPP8XSpUvRp08fqUPUmdjYWEyZMkVjcvHVV19h27ZtRR9UPhsbG2zevBlPnjxRaRdFEWvWrIGtre0bn/vYsWOYMmVKoROjbdu24auvvnrj6xKRfjExItKx48eP44svvkCzZs0QHR2NgQMHolGjRmjevDnCw8Nx+fJl9OrVSyfXevbsmcb23NxcZGZm6uQab6N8+fKoUaOGZNf/8MMPIYoifvrpJ5X2/fv348aNG+jUqVORxfL8+XMAQI0aNVC+fPkiuy4RFQ4TIyIdmzFjBgRBwPLlyyGXy9X2m5mZ4YMPPlB+rVAoMGvWLPj6+kIul8PZ2Rndu3fH7du3VY5r1KgRAgIC8OeffyIkJASWlpbo3bs3bt68CUEQMGvWLEyfPh1eXl6Qy+U4cOAAAOD06dP44IMP4ODgAHNzc9SoUQM///zzK+/j9OnT6Ny5Mzw9PWFhYQFPT0906dIF//zzj7LPmjVr8OmnnwIAGjdurByaWrNmDQDNQ2kZGRkIDw+Hl5cXzMzMUKZMGQwaNEit8uLp6Ym2bdsiMjISNWvWhIWFBXx9fbFq1apXxv6CnZ0d2rdvr3bMqlWrULduXVSqVEntmKioKHz44YcoW7YszM3NUaFCBQwYMAAPHjxQ9pk8eTK+/PJLAICXl5fyvl8MRb6IfevWrahRowbMzc0xZcoU5b7/DqWFhobC3Nwc0dHRyjaFQoGmTZvCxcUFiYmJr32/RPT2SkgdAJEhyc3Nxf79+xEYGAh3d/fXOuaLL77A8uXLMXjwYLRt2xY3b97EV199hYMHD+LMmTNwcnJS9k1MTMTnn3+O0aNHY8aMGZDJ/v3dZsGCBahUqRK+++472NraomLFijhw4ABatWqF9957D0uXLoWdnR1++ukndOrUCc+ePdM61+XmzZvw8fFB586d4eDggMTERCxZsgS1atVCbGwsnJyc8P7772PGjBkYN24cFi1ahJo1awJAgRURURTx0UcfYd++fQgPD0f9+vVx/vx5TJo0CcePH8fx48dVkslz585h5MiRGDt2LFxcXLBy5Ur06dMHFSpUQIMGDV7r8+3Tpw+aNm2KuLg4+Pn54fHjx9i6dSsWL16MlJQUtf7x8fEIDg5G3759YWdnh5s3b2LOnDmoV68eLly4AFNTU/Tt2xcPHz7EwoULsXXrVri5uQEA/P39lec5c+YM4uLiMGHCBHh5ecHKykpjfPPmzcPJkyfRsWNHREdHw97eHlOmTMHBgwcRGRmpPDcRFRGRiHQmKSlJBCB27tz5tfrHxcWJAMSBAweqtJ88eVIEII4bN07Z1rBhQxGAuG/fPpW+N27cEAGI5cuXF7OyslT2+fr6ijVq1BCzs7NV2tu2bSu6ubmJubm5oiiK4oEDB0QA4oEDBwqMNScnR3z69KloZWUlzp8/X9m+efPmAo/t0aOH6OHhofw6MjJSBCDOmjVLpd+mTZtEAOLy5cuVbR4eHqK5ubn4zz//KNueP38uOjg4iAMGDCgwzhcAiIMGDRIVCoXo5eUljho1ShRFUVy0aJFobW0tPnnyRPz2229FAOKNGzc0nkOhUIjZ2dniP//8IwIQf/31V+U+bcd6eHiIJiYm4pUrVzTu69Gjh0rb33//Ldra2oofffSR+Mcff4gymUycMGHCK++RiHSPQ2lEEnox3PVy5aZ27drw8/PDvn37VNpLliyJJk2aaDzXBx98AFNTU+XX165dw+XLl/HZZ58BAHJycpRbmzZtkJiYiCtXrhQY29OnTzFmzBhUqFABJUqUQIkSJWBtbY309HTExcW9ye1i//79ANTv99NPP4WVlZXa/VavXh3lypVTfm1ubo5KlSqpDOe9yosn09avX4+cnBz88MMP6NixI6ytrTX2T05ORmhoKNzd3VGiRAmYmprCw8MDAAp131WrVtU4VKdJhQoVsGLFCmzfvh1t27ZF/fr1MXny5Ne+FhHpDofSiHTIyckJlpaWuHHjxmv1fzGUo2m4pHTp0moJgLZhlZf33bt3DwAwatQojBo1SuMx/50387KuXbti3759+Oqrr1CrVi3Y2tpCEAS0adNGOZG4sFJSUlCiRAmUKlVKpV0QBLi6uqoNbTk6OqqdQy6XF/r6vXr1wpQpUzBjxgycOXMGCxcu1NhPoVCgRYsWuHv3Lr766itUqVIFVlZWUCgUqFOnTqGuW9ghsPfffx8uLi64d+8ewsLCYGJiUqjjiUg3mBgR6ZCJiQmaNm2K3bt34/bt2yhbtqzW/i9+8CcmJqr1vXv3rsr8IiAvgSjIy/teHBseHo4OHTpoPMbHx0dje2pqKnbu3IlJkyZh7NixyvbMzMy3WoPJ0dEROTk5uH//vkpyJIoikpKSUKtWrTc+tzbu7u5o1qwZpkyZAh8fH4SEhGjsd/HiRZw7dw5r1qxBjx49lO3Xrl0r9DW1/V1pEhoaiidPnqBy5coYOnQo6tevj5IlSxb6ukT0djiURqRj4eHhEEUR/fr1Q1ZWltr+7Oxs7NixAwCUw2IbNmxQ6XPq1CnExcWhadOmbxyHj48PKlasiHPnziEoKEjjZmNjo/FYQRAgiqLaU3UrV65Ebm6uStuLPq9TTXlxPy/f7y+//IL09PS3ut9XGTlyJNq1a6d1DaEXyczL971s2TK1voW571dZuXIlNmzYgO+//x6//fYbHj9+rLMlHYiocFgxItKx4OBgLFmyBAMHDkRgYCC++OILVK5cGdnZ2Th79iyWL1+OgIAAtGvXDj4+Pujfvz8WLlwImUyG1q1bK59Kc3d3x4gRI94qlmXLlqF169Zo2bIlevbsiTJlyuDhw4eIi4vDmTNnsHnzZo3H2draokGDBvj222/h5OQET09PHDp0CD/88APs7e1V+gYEBAAAli9fDhsbG5ibm8PLy0vjMFjz5s3RsmVLjBkzBmlpaahbt67yqbQaNWqgW7dub3W/2rRo0QItWrTQ2sfX1xfly5fH2LFjIYoiHBwcsGPHDkRFRan1rVKlCgBg/vz56NGjB0xNTeHj41NgslmQCxcuYOjQoejRo4cyGfrhhx/wySefYN68eRg+fHihzkdEb0naud9EhismJkbs0aOHWK5cOdHMzEy0srISa9SoIU6cOFFMTk5W9svNzRW/+eYbsVKlSqKpqano5OQkfv755+KtW7dUztewYUOxcuXKatd58VTat99+qzGOc+fOiR07dhSdnZ1FU1NT0dXVVWzSpIm4dOlSZR9NT6Xdvn1b/Pjjj8WSJUuKNjY2YqtWrcSLFy9qfKpq3rx5opeXl2hiYiICEFevXi2KovpTaaKY92TZmDFjRA8PD9HU1FR0c3MTv/jiC/HRo0cq/Tw8PMT3339f7X4aNmwoNmzYUOO9/hfyn0rTRtOTZbGxsWLz5s1FGxsbsWTJkuKnn34qJiQkiADESZMmqRwfHh4uli5dWpTJZCqfX0Gxv9j34vN7+vSp6OvrK/r7+4vp6ekq/QYNGiSampqKJ0+efOW9EpHuCKIoihLmZURERETvDM4xIiIiIsrHxIiIiIgoHxMjIiIionxMjIiIiEjv/vzzT7Rr1w6lS5eGIAjYvn37K485dOgQAgMDYW5uDm9vbyxdulTvcTIxIiIiIr1LT09HtWrV8P33379W/xs3bqBNmzaoX78+zp49i3HjxmHo0KH45Zdf9Bonn0ojIiKiIiUIArZt24aPPvqowD5jxozBb7/9pvKOwtDQUJw7dw7Hjx/XW2ysGBEREdEbyczMRFpamsqWmZmpk3MfP35cbVHWli1b4vTp08jOztbJNTThytdF4HdTze+jMhS1Y9ZJHYLebb3zntQh6F2zCtelDkGvIn60lToEvfMqb/jvVmsfdE/qEPTOv0JpvZ5flz+TTo3vgilTpqi0TZo0CZMnT37rcyclJcHFxUWlzcXFBTk5OXjw4EGhX9T8upgYERERGRHBtHAvONYmPDwcYWFhKm0vv2vwbbz8MuYXs38K+5LmwmBiRERERG9ELpfrNBH6L1dXVyQlJam0JScno0SJEhrfxagrTIyIiIiMiKyE/qotuhQcHIwdO3aotO3duxdBQUEwNTXV23U5+ZqIiMiICKYynW2F8fTpU8TExCAmJgZA3uP4MTExSEhIAJA3LNe9e3dl/9DQUPzzzz8ICwtDXFwcVq1ahR9++AGjRo3S2WehCStGRERERkSqitHp06fRuHFj5dcv5ib16NEDa9asQWJiojJJAgAvLy/s2rULI0aMwKJFi1C6dGksWLAAH3/8sV7jZGJEREREeteoUSNoWzpxzZo1am0NGzbEmTNn9BiVOiZGRERERkSXT6UZIiZGRERERqS4TL6WCidfExEREeVjxYiIiMiIcChNOyZGRERERoRDadpxKI2IiIgoHytGRERERkQwYcVIGyZGRERERkTGxEgrDqURERER5WPFiIiIyIgIMlaMtGFiREREZEQEEw4WacPEiIiIyIhwjpF2TBuJiIiI8kmWGDVq1AjDhw+X6vJERERGSZAJOtsMkWRDaVu3boWpqalUly8WHOoFwXtkH9jVDIB5aWec/ngg7v22T/sx9WvB/7uxsPaviMy7yYifvRIJy39S6ePavgUqTR4Gy/Ll8Cw+AVcmzsW9X//Q561otXX3H/jx111IeZQKT/cyGNb7M1Tz93nlcefjrmLIVzPgVa4s1syZrrHPH0dOYPKcxahfuyYixg7XceSvL+bPjTi97wekp92Ho1tFNOowDmUrBBXY/9bff+HQtplISfwb1nbOCGrWF9XqdVHuz83Nxl97lyH2r+14+vgeSjp7of6Ho+Dl36AobkfNzp078cuWLXj48CE8PDzQf8AABAQEaOx76eJFrFq9Grdv3UJmZiacnZ3Ruk0btG/fXtlnzOjRuHDhgtqxtWrVwpSpU/V2H6/yQX1LNKghh6W5DDfu5mBj5FPcfZBbYP/STib4sKElPFxLwMneBD/tfYo/TmWo9WsUaI6WdSxgby3D3fu5+CnqKf6+laPPW9EosIKAOr4CrC2A+6lA1FkFbt0vuH+5UkCzGjKUsgOePAdOxIk4Ey8q91f3FlDFS0Apu7yvkx4CB88rcPehnm9Ei907t2P71k149DAF7uU80af/YPgHVNXYN/bSBaxfvQy3b99CVmYGSjm7oEWrdvig/afKPseP/olfft6IxMQ7yM3JhVvpMviwQ0c0atKiqG6p0DiUpp1kiZGDg4NUly42TKwskXb+Cm6v3YrAzd+/sr+FZ1nU2rEct37YjJgeX6JkSE0ELJyErPsPkbRtLwDAvk511PjfXFydNB9Jv/4B1w+boeaP83C8UVc8/uu8vm9Jzb4jJ7Bg9UaM7NcDVfwq4tc9BzBq+ndYPz8CrqWcCjzuafozTF+wHIFV/fHwcZrGPknJD7BozY+vlWTp05XoXTi4NQJNO05Cae+aOH/0J2xb0g89xv8OW4fSav1TH9zCtqX9USXkU7Tu/i3uXj+DfT9PgYW1AypVbwkAOLpzHuJO/YbmXabDwcUb/8Qdxm8rB6PLiJ/g7O5fpPd36NAhLF+2DAMHDYK/vz9279qFiV99haXLlsHZ2Vmtv7m5Odq1awcvLy+Ym5vj0qVLWLhgAczlcrRu0wYAMOGrr5Cdna085smTJxg0cCDq1a9fZPf1slbBFmj+njlW73iKpIe5aFvXEmFdbTF+6WNkZokajzEzFXD/US5Ox2WiU3NrjX1q+Zmhc3MrbIx8imu3ctCgpjmGdbbDxGWP8DBNoc9bUuHnLqB5DQGR0SJuPRBRs7yAzg1kWLZbgbRn6v3trIBODWWIiRfx6wkR7k4CWgUKSM8UceV2Xh8PZyD2HxG3H4jIyQWC/QR0aSTD8t0KPHleZLemdOTP/Vi1YhH6DxwOX78A7I3cgWmTxmDBkjUo5eyi1t/c3Bxt2raHh5c3zM0tEHvpApZ+Pwfm5uZo0bodAMDGxhafdPocZcqWQwnTEjj913EsnPsN7OzsUSOwdlHfIunAOzGU5unpiRkzZqB3796wsbFBuXLlsHz5cpX+t2/fRufOneHg4AArKysEBQXh5MmTyv1LlixB+fLlYWZmBh8fH6xfv17leEEQsGzZMrRt2xaWlpbw8/PD8ePHce3aNTRq1AhWVlYIDg5GfHy8ynE7duxAYGAgzM3N4e3tjSlTpiAnp2h+k7u/509cnTQPSdujXqu/R//OyEhIROzIGXh6+TpurdqCW2u2wjust7KP15AeePDHMcTPWo70K9cRP2s5Huw/Ac8hPfR1G1r9tCMSbZs2RLvmjeBZtgyG9fkczo4O2L5nv9bjvl26Gs3r10HlShU07s/NVWDKvCXo07kDSruU0kfory36wGoEBH+MKiGfwtG1PBp/PB42JV1x7siPGvufO/oTbEu6ofHH4+HoWh5VQj5FQJ0OiN63Stkn7q9f8V6LUHhXbgh7J3dUq98Vnr71cHr/Ko3n1Kdt27ahRYsWaNWqFcqVK4cBoaEoVaoUfv/9d439y1eogEaNGsHDwwMuLi5o0qQJAgMDcfHSJWUfGxsbODg4KLezZ85ALpejvoSJUbPaFvj96HOcuZKFu/dzsWrHE5iZCnivsrzAY24m5mDL/mc4FZuFnBzNyVPz9yxwJCYDh2MykZiSi01R6XiUlotGNc31dSsavecrIOa6iJjrIlLSgKizItKeATUraK4u1KwgIC09r19KGhBzXcS5GyLq+P77Y+XXEyKir4m49xhIeQL8fkqEIACeLtJULH7bthlNW7RB85bvw72cB/r0HwxHJ2dE7vpNY3/v8hVRv1FTlPPwgrOLKxo1aY7qNWsh9tK/1cyAqtVRJ6Q+3Mt5wM2tDNp9+Ak8vcojLvZiUd1WoQkmgs42Q/TOTL6ePXs2goKCcPbsWQwcOBBffPEFLl++DAB4+vQpGjZsiLt37+K3337DuXPnMHr0aCgUeb9Nbdu2DcOGDcPIkSNx8eJFDBgwAL169cKBAwdUrjFt2jR0794dMTEx8PX1RdeuXTFgwACEh4fj9OnTAIDBgwcr++/Zsweff/45hg4ditjYWCxbtgxr1qzB119/XUSfSuHY16mO+38cVWm7v/cw7AIDIJTIKw6WrFMdD/44otLnQdRhlAyuUWRxvpCdnYOr8TdRq5rqkEut6lVw8fLfBR73+74/cScpGb06tS+wz5rN22Fva4u2zRrqLN43kZuThXu3LsHDt55Ku4dvXdy9cVbjMYk3YuDhW1e1v1993Eu4iNzc7PzzZsPE1EylTwlTc9y9fkaH0b9adnY2rv39N2rWrKnSXqNmTcTFxr7WOeKvXUNcXByqVKlSYJ89e/eiYcOGMDcv2mThBSd7GeytZbh0PUvZlpMLXEnIRoWyb154N5EBHm4lcOlGtkr7pevZKF+26KYayGSAW0ngRpJq8nY9SURZJ80//Mo6Crj+cv9EEW4OQEFTT0xN8vY9L6DCpk/Z2dmIv3YV1WuoDmFXrxmEy3Gvl8Rcj/8bV+IuonKVahr3i6KI8zHRuHP7VoHDc+8CQSbT2WaI3pnH9du0aYOBAwcCAMaMGYO5c+fi4MGD8PX1xf/+9z/cv38fp06dUg7BVajwb6Xgu+++Q8+ePZXHh4WF4cSJE/juu+/QuHFjZb9evXqhY8eOymsEBwfjq6++QsuWecMTw4YNQ69evZT9v/76a4wdOxY9euRVU7y9vTFt2jSMHj0akyZN0ngfmZmZyMzMVGnLFhUwFfT/DSR3cULmvQcqbVnJKZCZmsLMqSQyk+5D7uqEzHspqjHfS4HcteirKqlPniBXoYCDvZ1Ku4OdLVIep2o85tbdJCzd8DMWfT0eJUxMNPY5H3cVO/84hNUFzDsqSs/TH0FU5MLKxlGl3dLGCc/SNE/eSE97AEsb1WFEKxtHKBQ5eP70EaztnOHhVw9n9q9B2fK1YO9UDglXjyP+wj6IYsHzXfQhLS0NCoUC9iVLqrSXtLfHo0ePtB7b7fPPkZqaCoVCga6ffYZWrVpp7HflyhX8c/OmpA9r2Fnl/ftNS1f9gZ6WLsLR9s3/bVtbymAiE5D2VHXILC1dATvrovtt3NIMkMkEPH1p+lN6JmBdQC5qZZ63/7+eZgAmMgGWcqidCwAaVxPw5DlwI0k3cRfGk7S87zV7e9XvVXv7knj8iu/Vvt0/zf9ezUWnrj3QvOX7KvvT05+ib/dPkZ2dDZlMhv4Dh6slYFR8vDOJUdWq/2bXgiDA1dUVycnJAICYmBjUqFGjwHlJcXFx6N+/v0pb3bp1MX/+/AKv4eKSN578399SXVxckJGRgbS0NNja2iI6OhqnTp1SqRDl5uYiIyMDz549g6WlpVosERERmDJlikpbF8EBn5kUPF9Gp8SXfhMTBPV2TX1ebitCwkv//4vI+x54WW6uAlPm5g2PlSvtpvFcz54/x7T5SzF6YG/Y29roIdo3pHY/IoCCf/C9fP8iRJX2xh+PR9SPE7BmemtAEGDv5I7KdTrg0omtuoz6tanFK4oa/w7/69vvvsPz589x5fJlrF69GqVLl0ajRo3U+u3dswcenp7w8Sm6uWLvVZajW5t/5wQt2PQiUVf9d6Kr1OXlf30S/5P8Nw6ox6aioP9uNHSt4yugcjkBG/YrkFt0U6fUqX2vavjn+ZKvZy1ARsZzXLkci/VrVsDNrQzqN2qq3G9hYYk5C1ci4/lznD93BqtXLoara2kEVK2uhxt4e4b6NJmuvDOJ0ctPqAmCoBwqs7CweOXxr/Mf83+v8WKfprYX11UoFJgyZQo6dOigdr2CSvrh4eEICwtTadvvEPjK+HUh894DtcqPWSkHKLKzkZXyOK9P0gPIXVWTNLmzg1qlqSjY2djARCZDyiPV6tCj1DQ42Nmq9X+W8RyX42/g7xv/YO6KdQAAhShCFEU0/KQn5kwaDVtrKyQmP8DYGXOVxynyf8I0/KQn/vf9Nyjjqj7JUl8srEpCkJkgPU318332JAWWtpqTZStbJ6S/VE169uQhZLISMLeyBwBY2jjgw/6LkZOdiefpj2Ft54zDv30HO8eyermPgtja2kImk+HRQ9XHjB6npsLe3l7rsa6urgAALy8vPHr8GBs3bFBLjDIyMnDo0CF83q2bLsN+pZi/s3Bj5b9VhBL5cylsrWRIffpvVc7GSkBa+pv/lH/6TIFchQg7a9Wqk42lTK06pU/PsgCFQlSrDlnKgXQNlR8gr93qpf5WciBXIeL5S5Wk93wE1PUX8L8DCiRrLgbrnY2tHWQyGR4/Uv1eTU19BLuXqkgvc3HN+0XMw9MbqY8f4af/rVVJjGQyGdxKlwEAeJWvgNu3/sEvmze+s4kRn0rT7p1JjLSpWrUqVq5ciYcPH2qsGvn5+eHIkSPo3r27su3YsWPw8/N7q+vWrFkTV65cURm2exW5XA65XHUyZlEMowHA4xMxcH6/sUpbqeb1kBp9EWL+hPFHJ2Lg1LQubsxfq+zj1KweHh3XPN9Fn0xNS6BSeU+cOncRDev8W3Y+fe4i6tWuqdbfysIC6+bOUGnbGvkHzlyMw/RRQ+DmUgoymaDWZ8WPW/DseQaG9f4czo6qQ1r6ZlLCDC7ulZFw+SgqVmuubP/nyjGUr9JU4zFuXtVx/aLq/Lh/Lh+BS7kAmJio/gJRwlQOG3sX5OZm4++YvfCp0Vr3N6GFqakpKlSsiLNnzyKk7r/zos6eOYM6wcGvfR5RFFWeQnvh8OHDyM7ORpMmTXQS7+vKzBKR/NI8mMdPFajsZYZb9/IepzKRAT7lTLFlv4ZHtl5TrgL4JzEH/l6mOHvl3/lL/l6miLmapeVI3VIogMRHgJergCt3/r1vL1cBV+9oTtBup4ioWFq1puTlKiDxIaD4zyF1fPOSoh8PKZCofcRKr0xNTVG+QiWcO3sadUL+ncR/7mw0atepq+VIVXnfq9r/bgr6fqbioVgkRl26dMGMGTPw0UcfISIiAm5ubjh79ixKly6N4OBgfPnll+jYsSNq1qyJpk2bYseOHdi6dSv++OPt1uaZOHEi2rZtC3d3d3z66aeQyWQ4f/48Lly4gOnT9T9/xcTKElYVyim/tvQqC9tqvsh6mIqMW4nwmR4G8zIuONdrDADgn+U/wWPgZ/D7dixu/fAz7OvUgHuvj3H285HKc9z8fh3q7N8A71H9cG/HPri0awqnpsE43qir3u9Hk87tWmHagmXwreCFAJ8K+G3vQdx7kIKPWuT9IFy64WfcT3mEr4YNgEwmg7eHakWkpJ0tzExNVdpf7mNtZamxvagENu6F3etHw6VcANy8auDC0U148jAR1ep1BgAc/m02nj6+h9bdZwEAqtXtjJg/N+Lg1ghUCemIxBtncfH4L2jTc7bynIk3z+Hp43soVdYPTx/fw/HdCwFRgaBmfYv8/tq3b4/Z332HihUrwtfPD5G7d+P+/ftok//o/erVq5GSkoJRo0YByHvS07lUKZR1dwcAXLp0CVt/+QXtPvhA7dx79+xBcHAwbG3VK4hF7Y+/nqNNXQvce5SLew9z8X6IBbKyRZy89G95pHc7azx+osDWg3nJkokMKF0qby5cCRPA3kYGdxeTvMTrUV6lKerkc/T50AY3E3Nw/XYOGtQwh4OdCQ6eKaBUoycnL4v4sE5eYnM7RUSN8gLsLIEz1/KynEZVBdhYADtO5n195pqIoIoCmlUXcPa6iLKOAqp7C9h2/N8KWh1fAQ2rCNh+XIHU9H8rTFk5QHbRL9OED9p/ivmzI1C+og98fCsjKnInHty/h5Zt8h69X79mBR6m3MewkeMAALt2bkOpUi4oUzbv/+G42Av4devPaNPu3wc/fvl5I8pX9IGra2nk5OQg+vQJHNy/FwMGjSj6G3xNHErTrlgkRmZmZti7dy9GjhyJNm3aICcnB/7+/li0aBEA4KOPPsL8+fPx7bffYujQofDy8sLq1as1zlcojJYtW2Lnzp2YOnUqZs2aBVNTU/j6+qJv36L54WMXGIDgff8uO+D/Xd4/1lvrtuJ8n3DI3UrBwv3fuTbPb97GqXb94T87HB5ffIbMu8m4NOJr5RpGAPDo+Fmc/SwMPlOGw2fKUDyLv4WzXUdIsoYRADStVwepT55izc+/IuXRY3iVK4tvx4+Eq3PeMFPKo8e49yDlFWd5t/kEtsHz9Ec4EbkY6WnJcHSrhPZfLIetQ17pPT31Pp48SlT2t3NyR/vQ5Ti0NQLnDm+Ela0zGn8yXrmGEQDkZGfi6O/zkPrgFkzllvDyb4jW3WfB3LLoE4iGDRviyZMn+N///oeHDx/C09MTU6ZOVc7je/TwIe7nzxcEAFGhwJo1a5CUlAQTExO4ubmhV69eyjWMXrh9+zYuXbqE6e/IU6CRx5/DrISAz1pZw8pcwPU7OZjzY5rKGkaOdiYqc4PsbWSY1PffYZpWwZZoFWyJK/9k49sNeWNKp+KyYGWZjnb1LGGXv8Dj/J9Si3QNIwCIuyXCUg7UCxBgbS7gfirw05//rmFkbQHYWf1bIUpNBzYdUqB5DRkCKwp4+hzYe+bfNYwAILCigBImAj6pp/qgxJ8XFTh8segnUdVr0ARP0tLw84/r8OjhQ5Tz8MSEKTPh7Jw3rPvoYQru3//v96qI9WtXIDn/e9XVrTS69eynXMMIyBvuXb54HlIe3IeZmRxlypbD8FHjUK9B0VY5C8NQnybTFUEU34Upfobtd1NpFxjUt9ox66QOQe+23nlP6hD0rlmF61KHoFcRP0pfddI3r/La58oYgvZB96QOQe/8K6gv/KpLF9o2fnWn11Rl54FXdypmmDYSERER5SsWQ2lERESkG3wqTTsmRkREREaEk6+141AaERERUT5WjIiIiIwIn0rTjokRERGREeFQmnZMG4mIiIjysWJERERkRFgx0o6JERERkRFhYqQdh9KIiIiI8rFiREREZET4VJp2TIyIiIiMCFe+1o6JERERkRHhHCPtWE8jIiIiyseKERERkRHhHCPtmBgREREZEQ6lace0kYiIiCgfK0ZERERGhBUj7ZgYERERGRHOMdKOnw4RERFRPlaMikDtmHVSh6BXf1XvLnUIevf4xzipQ9C78w88pA5Br/wDDP/3QHsbwx8iyRH5Y+ttcShNO36HERERGREOpWnHT4eIiIiKxOLFi+Hl5QVzc3MEBgbi8OHDWvtv3LgR1apVg6WlJdzc3NCrVy+kpKToNUYmRkRERMZEEHS3FcKmTZswfPhwjB8/HmfPnkX9+vXRunVrJCQkaOx/5MgRdO/eHX369MGlS5ewefNmnDp1Cn379tXFp1AgJkZERERGRJAJOtsKY86cOejTpw/69u0LPz8/zJs3D+7u7liyZInG/idOnICnpyeGDh0KLy8v1KtXDwMGDMDp06d18TEUiIkRERGRERFkMp1tmZmZSEtLU9kyMzPVrpmVlYXo6Gi0aNFCpb1FixY4duyYxjhDQkJw+/Zt7Nq1C6Io4t69e9iyZQvef/99vXwuLzAxIiIiojcSEREBOzs7lS0iIkKt34MHD5CbmwsXFxeVdhcXFyQlJWk8d0hICDZu3IhOnTrBzMwMrq6usLe3x8KFC/VyLy8wMSIiIjIiuhxKCw8PR2pqqsoWHh5e8LVfmpckiqJa2wuxsbEYOnQoJk6ciOjoaERGRuLGjRsIDQ3V6efxMj6uT0REZER0+bi+XC6HXC5/ZT8nJyeYmJioVYeSk5PVqkgvREREoG7duvjyyy8BAFWrVoWVlRXq16+P6dOnw83N7e1vQANWjIiIiEivzMzMEBgYiKioKJX2qKgohISEaDzm2bNnkL2UxJmYmADIqzTpCytGRERERkSqla/DwsLQrVs3BAUFITg4GMuXL0dCQoJyaCw8PBx37tzBunV5b4to164d+vXrhyVLlqBly5ZITEzE8OHDUbt2bZQuXVpvcTIxIiIiMiJSJUadOnVCSkoKpk6disTERAQEBGDXrl3w8Mh7HVFiYqLKmkY9e/bEkydP8P3332PkyJGwt7dHkyZN8M033+g1TkHUZz2KAAD3L52UOgS9MoZ3pV00gnelVSpn2P8V3Eg0/JkDxvCutCD3ZKlD0LuqFZ31ev7kcN39n+0cYXjvAmXFiIiIyJjwXWlaMTEiIiIyIgU9Hk95mDYSERER5WPFiIiIyIjoch0jQ8TEiIiIyIhI9VRaccHEiIiIyJiwYqQVPx0iIiKifKwYERERGREOpWmn94rRwYMHIQgCHj9+rO9LvZKnpyfmzZsndRhERESSEQSZzjZDZJB3tWbNGtjb26u1nzp1Cv379y/6gIiIiKhYMKqhtFKlSkkdAhERkbQ4lKZVoStGoihi1qxZ8Pb2hoWFBapVq4YtW7Yo9+/atQuVKlWChYUFGjdujJs3b6ocP3nyZFSvXl2lbd68efD09FRpW7VqFSpXrgy5XA43NzcMHjxYuW/OnDmoUqUKrKys4O7ujoEDB+Lp06cA8obuevXqhdTUVAiCAEEQMHnyZADqQ2kJCQn48MMPYW1tDVtbW3Ts2BH37t1Ti3X9+vXw9PSEnZ0dOnfujCdPnhT2YyMiInonCDKZzjZDVOi7mjBhAlavXo0lS5bg0qVLGDFiBD7//HMcOnQIt27dQocOHdCmTRvExMSgb9++GDt2bKGDWrJkCQYNGoT+/fvjwoUL+O2331ChQoV/g5bJsGDBAly8eBFr167F/v37MXr0aABASEgI5s2bB1tbWyQmJiIxMRGjRo1Su4Yoivjoo4/w8OFDHDp0CFFRUYiPj0enTp1U+sXHx2P79u3YuXMndu7ciUOHDmHmzJmFviciIiJ69xVqKC09PR1z5szB/v37ERwcDADw9vbGkSNHsGzZMnh6esLb2xtz586FIAjw8fHBhQsX8M033xQqqOnTp2PkyJEYNmyYsq1WrVrKPw8fPlz5Zy8vL0ybNg1ffPEFFi9eDDMzM9jZ2UEQBLi6uhZ4jT/++APnz5/HjRs34O7uDgBYv349KleujFOnTimvp1AosGbNGtjY2AAAunXrhn379uHrr7/WeN7MzExkZmaqtmVlQW5mVqjPgIiISB/4VJp2haoYxcbGIiMjA82bN4e1tbVyW7duHeLj4xEXF4c6deqovKDuRQL1upKTk3H37l00bdq0wD4HDhxA8+bNUaZMGdjY2KB79+5ISUlBenr6a18nLi4O7u7uyqQIAPz9/WFvb4+4uDhlm6enpzIpAgA3NzckJycXeN6IiAjY2dmpbPNXrH3tuIiIiPRKkOluM0CFqhgpFAoAwO+//44yZcqo7JPL5RgyZMgrzyGTySCKokpbdna28s8WFhZaj//nn3/Qpk0bhIaGYtq0aXBwcMCRI0fQp08flfO8iiiKGt8w/HK7qampyn5BEJSfgybh4eEICwtTaUuLP/facREREZF0CpUY+fv7Qy6XIyEhAQ0bNtS4f/v27SptJ06cUPm6VKlSSEpKUklAYmJilPttbGzg6emJffv2oXHjxmrXOH36NHJycjB79mzI8id+/fzzzyp9zMzMkJub+8p7SUhIwK1bt5RVo9jYWKSmpsLPz0/rsdrI5XLI5XKVtkwOoxER0TuCQ2naFSoxsrGxwahRozBixAgoFArUq1cPaWlpOHbsGKytrREaGorZs2cjLCwMAwYMQHR0NNasWaNyjkaNGuH+/fuYNWsWPvnkE0RGRmL37t2wtbVV9pk8eTJCQ0Ph7OyM1q1b48mTJzh69CiGDBmC8uXLIycnBwsXLkS7du1w9OhRLF26VOUanp6eePr0Kfbt24dq1arB0tISlpaWKn2aNWuGqlWr4rPPPsO8efOQk5ODgQMHomHDhggKCirkx0hERFRMGOjTZLpS6E9n2rRpmDhxIiIiIuDn54eWLVtix44d8PLyQrly5fDLL79gx44dqFatGpYuXYoZM2aoHO/n54fFixdj0aJFqFatGv766y+1p8Z69OiBefPmYfHixahcuTLatm2Lv//+GwBQvXp1zJkzB9988w0CAgKwceNGREREqBwfEhKC0NBQdOrUCaVKlcKsWbPU7kMQBGzfvh0lS5ZEgwYN0KxZM3h7e2PTpk2F/UiIiIiKjRdL2ehiM0SC+PKEH9K5+5dOSh2CXv1VvbvUIejdxR/jXt2pmKtUzrD/K7iRaPi/JdvbGOYPqv8Kci/44RdDUbWis17P/2T+SJ2dy2bYbJ2d611hVCtfExERGT0OpWnFxIiIiMiIcPK1dkwbiYiIiPKxYkRERGRMDHRhRl1hYkRERGRMOJSmFdNGIiIionysGBERERkRgUNpWjExIiIiMiYcStOKaSMRERFRPlaMiIiIjIjABR61YmJERERkTAz0HWe6wsSIiIjImLBipBU/HSIiIqJ8rBgREREZEw6lacXEiIiIyIhw8rV2/HSIiIiI8rFiREREZEy48rVWTIyIiIiMCVe+1oppIxEREVE+VoyIiIiMCF8iqx0ToyKw9c57UoegV49/jJM6BL0L6OIndQh6Z38uWuoQ9OpqtqXUIejdqrl/Sh2C3imGN5Q6BL2rWlHPF+BQmlZMG4mIiIjysWJERERkTDiUphUTIyIiImPCla+1YmJERERkTLjytVb8dIiIiIjysWJERERkTDjHSCsmRkRERMaEj+trxbSRiIiIisTixYvh5eUFc3NzBAYG4vDhw1r7Z2ZmYvz48fDw8IBcLkf58uWxatUqvcbIihEREZExkWgobdOmTRg+fDgWL16MunXrYtmyZWjdujViY2NRrlw5jcd07NgR9+7dww8//IAKFSogOTkZOTk5eo2TiREREZExkehx/Tlz5qBPnz7o27cvAGDevHnYs2cPlixZgoiICLX+kZGROHToEK5fvw4HBwcAgKenp97j5FAaERERvZHMzEykpaWpbJmZmWr9srKyEB0djRYtWqi0t2jRAseOHdN47t9++w1BQUGYNWsWypQpg0qVKmHUqFF4/vy5Xu7lBSZGRERExkQm09kWEREBOzs7lU1T9efBgwfIzc2Fi4uLSruLiwuSkpI0hnn9+nUcOXIEFy9exLZt2zBv3jxs2bIFgwYN0svH8gKH0oiIiIyJDofSwsPDERYWptIml8u1XFr12qIoqrW9oFAoIAgCNm7cCDs7OwB5w3GffPIJFi1aBAsLi7eMXjMmRkRERPRG5HK51kToBScnJ5iYmKhVh5KTk9WqSC+4ubmhTJkyyqQIAPz8/CCKIm7fvo2KFSu+XfAF4FAaERGRMRFkuttek5mZGQIDAxEVFaXSHhUVhZCQEI3H1K1bF3fv3sXTp0+VbVevXoVMJkPZsmXf7N5fAxMjIiIiY6LDOUaFERYWhpUrV2LVqlWIi4vDiBEjkJCQgNDQUAB5w3Ldu3dX9u/atSscHR3Rq1cvxMbG4s8//8SXX36J3r17620YDeBQGhERkXGR6HH9Tp06ISUlBVOnTkViYiICAgKwa9cueHh4AAASExORkJCg7G9tbY2oqCgMGTIEQUFBcHR0RMeOHTF9+nS9xsnEiIiIiIrEwIEDMXDgQI371qxZo9bm6+urNvymb0yMiIiIjAlfIqsVEyMiIiJjItFQWnHBtPE1TJ48GdWrV5c6DCIiItIzg60YiaKI3NxclChhsLdIRERUeIV8mszYvDOfTqNGjTB48GAMHjwY9vb2cHR0xIQJEyCKIgBgw4YNCAoKgo2NDVxdXdG1a1ckJycrjz948CAEQcCePXsQFBQEuVyOw4cPQxRFzJo1C97e3rCwsEC1atWwZcsWteP27duHoKAgWFpaIiQkBFeuXAGQNxlsypQpOHfuHARBgCAIGieIERERFQeiIOhsM0TvTGIEAGvXrkWJEiVw8uRJLFiwAHPnzsXKlSsB5L2Abtq0aTh37hy2b9+OGzduoGfPnmrnGD16NCIiIhAXF4eqVatiwoQJWL16NZYsWYJLly5hxIgR+Pzzz3Ho0CGV48aPH4/Zs2fj9OnTKFGiBHr37g0g7/HCkSNHonLlykhMTERiYiI6deqk98+CiIiIit47Nc7k7u6OuXPnQhAE+Pj44MKFC5g7dy769eunTFQAwNvbGwsWLEDt2rXx9OlTWFtbK/dNnToVzZs3BwCkp6djzpw52L9/P4KDg5XHHjlyBMuWLUPDhg2Vx3399dfKr8eOHYv3338fGRkZsLCwgLW1NUqUKAFXV9ei+BiIiIj0h0+lafVOJUZ16tRReZlccHAwZs+ejdzcXJw/fx6TJ09GTEwMHj58CIVCAQBISEiAv7+/8pigoCDln2NjY5GRkaFMlF7IyspCjRo1VNqqVq2q/LObmxuAvHe4lCtXrlD3kJmZiczMTJW27Cw5TM1e/S4ZIiIivWNipNU7lRgVJCMjAy1atECLFi2wYcMGlCpVCgkJCWjZsiWysrJU+lpZWSn//CJ5+v3331GmTBmVfi+/9M7U1FT55xfJ2YvjCyMiIgJTpkxRaXv/80lo121yoc9FREREReudSoxOnDih9nXFihVx+fJlPHjwADNnzoS7uzsA4PTp0688n7+/P+RyORISElSGzQrLzMwMubm5r9U3PDwcYWFhKm3r/mS1iIiI3g2GOmlaV96pxOjWrVsICwvDgAEDcObMGSxcuBCzZ89GuXLlYGZmhoULFyI0NBQXL17EtGnTXnk+GxsbjBo1CiNGjIBCoUC9evWQlpaGY8eOwdraGj169HituDw9PXHjxg3ExMSgbNmysLGxUas4vSCXy9WrUWavdRkiIiL941CaVu9UYtS9e3c8f/4ctWvXhomJCYYMGYL+/fsrH5EfN24cFixYgJo1a+K7777DBx988MpzTps2Dc7OzoiIiMD169dhb2+PmjVrYty4ca8d18cff4ytW7eicePGePz4MVavXq3xiTgiIqJ3HitGWgnii4WCJNaoUSNUr14d8+bNkzoUnVu2V+oI9OtxWuHnYhU3AV38pA5B7+zPRUsdgl4dibWUOgS927H2sNQh6F3P4W8+LaK46NtUv+d/dnizzs5lWf9TnZ3rXfFOVYyIiIhIz7jytVZMjIiIiIwIJ19r984kRgcPHpQ6BCIiIjJy70xiREREREWAT6VpxcSIiIjIiIhMjLTip0NERESUjxUjIiIiY8LJ11oxMSIiIjIiHErTjokRERGRMWHFSCumjURERET5WDEiIiIyJhxK04qJERERkRHhytfaMW0kIiIiyseKERERkTHhUJpWTIyIiIiMiAgOpWnDtJGIiIgoHytGRERERoQLPGrHxIiIiMiYMDHSip8OERERUT5WjIiIiIwI1zHSjokRERGREeEcI+2YGBWBZhWuSx2CXp1/4CF1CHpnfy5a6hD07nG1QKlD0Kv7C85KHYLe9RjWUOoQ9C4zS+oIDAArRloxbSQiIiLKx4oRERGREeFQmnZMjIiIiIwIV77WjmkjERERUT5WjIiIiIwIh9K0Y2JERERkTPhUmlZMG4mIiIjysWJERERkRETWRLRiYkRERGRE+EoQ7Zg2EhEREeVjxYiIiMiI8Kk07ZgYERERGREu8Kgd00YiIiIjIgoynW2FtXjxYnh5ecHc3ByBgYE4fPjwax139OhRlChRAtWrVy/0NQuLiRERERHp3aZNmzB8+HCMHz8eZ8+eRf369dG6dWskJCRoPS41NRXdu3dH06ZNiyROJkZERERGRBQEnW2FMWfOHPTp0wd9+/aFn58f5s2bB3d3dyxZskTrcQMGDEDXrl0RHBz8Nrf92pgYERERGRERgs62zMxMpKWlqWyZmZlq18zKykJ0dDRatGih0t6iRQscO3aswFhXr16N+Ph4TJo0SeefQ0GYGBEREdEbiYiIgJ2dncoWERGh1u/BgwfIzc2Fi4uLSruLiwuSkpI0nvvvv//G2LFjsXHjRpQoUXTPivGpNCIiIiOiy8f1w8PDERYWptIml8sL7C+8NPwmiqJaGwDk5uaia9eumDJlCipVqqSbYF8TEyMiIiIjosvH9eVyudZE6AUnJyeYmJioVYeSk5PVqkgA8OTJE5w+fRpnz57F4MGDAQAKhQKiKKJEiRLYu3cvmjRpopubeInRDKWtWbMG9vb2b30eQRCwffv2tz4PERGRsTAzM0NgYCCioqJU2qOiohASEqLW39bWFhcuXEBMTIxyCw0NhY+PD2JiYvDee+/pLVajqRh16tQJbdq0kToMIiIiSUm18nVYWBi6deuGoKAgBAcHY/ny5UhISEBoaCiAvGG5O3fuYN26dZDJZAgICFA53tnZGebm5mrtumZQiVFWVhbMzMzU2rOzs2FhYQELCwsJoiIiInp3SLXydadOnZCSkoKpU6ciMTERAQEB2LVrFzw8PAAAiYmJr1zTqCgUWdrYqFEjDBkyBMOHD0fJkiXh4uKC5cuXIz09Hb169YKNjQ3Kly+P3bt3A8ibeNWnTx94eXnBwsICPj4+mD9/vso5e/bsiY8++ggREREoXbo0KlWqhJs3b0IQBPz8889o1KgRzM3NsWHDBo1DaTt27EBgYCDMzc3h7e2NKVOmICcnR7n/77//RoMGDWBubg5/f3+1EiARERG9voEDB+LmzZvIzMxEdHQ0GjRooNy3Zs0aHDx4sMBjJ0+ejJiYGL3HWKQVo7Vr12L06NH466+/sGnTJnzxxRfYvn072rdvj3HjxmHu3Lno1q0bEhISYGpqirJly+Lnn3+Gk5MTjh07hv79+8PNzQ0dO3ZUnnPfvn2wtbVFVFQURFFUto8ZMwazZ8/G6tWrIZfLsXfvXpVY9uzZg88//xwLFixA/fr1ER8fj/79+wMAJk2aBIVCgQ4dOsDJyQknTpxAWloahg8fXiSfExERkb7wJbLaFWliVK1aNUyYMAFA3ljizJkz4eTkhH79+gEAJk6ciCVLluD8+fOoU6cOpkyZojzWy8sLx44dw88//6ySGFlZWWHlypXKIbSbN28CAIYPH44OHToUGMvXX3+NsWPHokePHgAAb29vTJs2DaNHj8akSZPwxx9/IC4uDjdv3kTZsmUBADNmzEDr1q213mNmZqba4laZmZmvNWufiIhI3/gSWe2KNG2sWrWq8s8mJiZwdHRElSpVlG0vHtlLTk4GACxduhRBQUEoVaoUrK2tsWLFCrXxxypVqmicVxQUFKQ1lujoaEydOhXW1tbKrV+/fkhMTMSzZ88QFxeHcuXKKZMiAK+1HLmmxa6WLl36yuOIiIiKglSvBCkuirRiZGpqqvK1IAgqbS8WeVIoFPj5558xYsQIzJ49G8HBwbCxscG3336LkydPqpzDyspK47UKan9BoVBgypQpGqtK5ubmKsNyL8enjabFrm7fufPK44iIiEh67+xTaYcPH0ZISAgGDhyobIuPj9fZ+WvWrIkrV66gQoUKGvf7+/sjISEBd+/eRenSpQEAx48ff+V5NS12JX/w4O0DJiIi0gFRNMxKj668s4lRhQoVsG7dOuzZswdeXl5Yv349Tp06BS8vL52cf+LEiWjbti3c3d3x6aefQiaT4fz587hw4QKmT5+OZs2awcfHB927d8fs2bORlpaG8ePH6+TaREREUhGNZ23nN/LOfjqhoaHo0KEDOnXqhPfeew8pKSkq1aO31bJlS+zcuRNRUVGoVasW6tSpgzlz5ijXU5DJZNi2bRsyMzNRu3Zt9O3bF19//bXOrk9ERETvHkHUNJmGdCr++nWpQ9Cr8w88pA5B75ytn0sdgt49rhYodQh6dWDBWalD0DufipZSh6B3WdlSR6B/g7Q//PzWrsbrbhHFSuXL6exc74p3diiNiIiIdI+P62v3zg6lERERERU1VoyIiIiMCCtG2jExIiIiMiJMjLTjUBoRERFRPlaMiIiIjAgXeNSOiREREZER4VCadkyMiIiIjAgTI+04x4iIiIgoHytGRERERoQVI+2YGBERERkRTr7WjkNpRERERPlYMSIiIjIiCg6lacXEiIiIyIhwjpF2HEojIiIiyseKERERkRHh5GvtmBgREREZEQ6lacehNCIiIqJ8rBgREREZEQ6lacfEiIiIyIhwKE07JkZERERGhBUj7ZgYFYGIH22lDkGv/AMMf6ra1WxLqUPQu/sLzkodgl41HlpD6hD07vbvV6QOQe8uXnwsdQj619pe6giMGhMjIiIiI6KQOoB3HBMjIiIiI8KhNO0MfwyEiIiI6DWxYkRERGRE+FSadkyMiIiIjAiH0rTjUBoRERFRPlaMiIiIjAiH0rRjYkRERGREFKLUEbzbOJRGRERElI8VIyIiIiPCoTTtmBgREREZET6Vph0TIyIiIiMico6RVpxjRERERJSPFSMiIiIjouAcI62YGBERERkRzjHSjkNpRERERPlYMSIiIjIinHytHRMjIiIiI8J1jLTjUBoREREVicWLF8PLywvm5uYIDAzE4cOHC+y7detWNG/eHKVKlYKtrS2Cg4OxZ88evccoeWIkiiL69+8PBwcHCIKAmJgYSeK4efOmpNcnIiIqCgpRd1thbNq0CcOHD8f48eNx9uxZ1K9fH61bt0ZCQoLG/n/++SeaN2+OXbt2ITo6Go0bN0a7du1w9uxZHXwKBZN8KC0yMhJr1qzBwYMH4e3tDScnJ6lDIiIiMlhSPZU2Z84c9OnTB3379gUAzJs3D3v27MGSJUsQERGh1n/evHkqX8+YMQO//vorduzYgRo1augtTskTo/j4eLi5uSEkJETqUIiIiKgQMjMzkZmZqdIml8shl8tV2rKyshAdHY2xY8eqtLdo0QLHjh17rWspFAo8efIEDg4Obxf0K0g6lNazZ08MGTIECQkJEAQBnp6eEEURs2bNgre3NywsLFCtWjVs2bJFeczBgwchCAL27NmDGjVqwMLCAk2aNEFycjJ2794NPz8/2NraokuXLnj27JnyuMjISNSrVw/29vZwdHRE27ZtER8frzW+2NhYtGnTBtbW1nBxcUG3bt3w4MEDvX0eRERE+iaKutsiIiJgZ2ensmmq/jx48AC5ublwcXFRaXdxcUFSUtJrxT179mykp6ejY8eOOvkcCiJpYjR//nxMnToVZcuWRWJiIk6dOoUJEyZg9erVWLJkCS5duoQRI0bg888/x6FDh1SOnTx5Mr7//nscO3YMt27dQseOHTFv3jz873//w++//46oqCgsXLhQ2T89PR1hYWE4deoU9u3bB5lMhvbt20OhUGiMLTExEQ0bNkT16tVx+vRpREZG4t69e3r/CyEiItInBQSdbeHh4UhNTVXZwsPDC7y2IKgO44miqNamyY8//ojJkydj06ZNcHZ2fuvPQBtJh9Ls7OxgY2MDExMTuLq6Ij09HXPmzMH+/fsRHBwMAPD29saRI0ewbNkyNGzYUHns9OnTUbduXQBAnz59EB4ejvj4eHh7ewMAPvnkExw4cABjxowBAHz88ccq1/7hhx/g7OyM2NhYBAQEqMW2ZMkS1KxZEzNmzFC2rVq1Cu7u7rh69SoqVaqk8Z40lRVzczJhUkKusT8REVFR0uU6RpqGzTRxcnKCiYmJWnUoOTlZrYr0sk2bNqFPnz7YvHkzmjVr9lbxvg7Jn0r7r9jYWGRkZKB58+awtrZWbuvWrVMb9qpataryzy4uLrC0tFQmRS/akpOTlV/Hx8eja9eu8Pb2hq2tLby8vACgwNnw0dHROHDggEocvr6+ynMVRFNZ8dyh+YX/MIiIiAyEmZkZAgMDERUVpdIeFRWldY7xjz/+iJ49e+J///sf3n//fX2HCeAdmHz9Xy+GtX7//XeUKVNGZd/LGampqanyz4IgqHz9ou2/w2Tt2rWDu7s7VqxYgdKlS0OhUCAgIABZWVkFxtKuXTt88803avvc3NwKvIfw8HCEhYWptA2b+6TA/kREREVJqqfSwsLC0K1bNwQFBSE4OBjLly9HQkICQkNDAeT9/Lxz5w7WrVsHIC8p6t69O+bPn486deooq00WFhaws7PTW5zvVGLk7+8PuVyOhIQElWGzt5WSkoK4uDgsW7YM9evXBwAcOXJE6zE1a9bEL7/8Ak9PT5Qo8fofk6ayokkJzckXERFRUSvs+kO60qlTJ6SkpGDq1KlITExEQEAAdu3aBQ8PDwB5c3v/O4qzbNky5OTkYNCgQRg0aJCyvUePHlizZo3e4nynEiMbGxuMGjUKI0aMgEKhQL169ZCWloZjx47B2toaPXr0eKPzlixZEo6Ojli+fDnc3NyQkJCg9sjgywYNGoQVK1agS5cu+PLLL+Hk5IRr167hp59+wooVK2BiYvJGsRARERmrgQMHYuDAgRr3vZzsHDx4UP8BafBOJUYAMG3aNDg7OyMiIgLXr1+Hvb09atasiXHjxr3xOWUyGX766ScMHToUAQEB8PHxwYIFC9CoUaMCjyldujSOHj2KMWPGoGXLlsjMzISHhwdatWoFmeydmppFRET02vgSWe0EUeRHpG99vzbstY/8AxylDkHvsrMN/5/J/fsZUoegV42H6m+l3HfF7d+vSB2C3sWceyx1CHq35Et7vZ5/61+al6l5Ex1qG16hwPDuiIiIiOgNvXNDaURERKQ/Uk2+Li6YGBERERkRTqDRjkNpRERERPlYMSIiIjIirBhpx8SIiIjIiCgkWvm6uGBiREREZERYMdKOc4yIiIiI8rFiREREZERYMdKOiREREZER4TpG2nEojYiIiCgfK0ZERERGRORTaVoxMSIiIjIinGOkHYfSiIiIiPKxYkRERGREOPlaOyZGRERERoRDadpxKI2IiIgoHytGRERERoQVI+2YGBERERkRzjHSjokRERGREWHFSDvOMSIiIiLKx4pREfAqX1LqEPTK3sbwV1FdNfdPqUPQux7DGkodgl7d/v2K1CHoXdn3faQOQe/+GBwpdQhFwF6vZ1co9Hr6Yo+JERERkRHhUJp2HEojIiIiyseKERERkRFhxUg7JkZERERGhI/ra8ehNCIiIqJ8rBgREREZEVGnY2mG91QyEyMiIiIjwjlG2nEojYiIiCgfK0ZERERGhAs8asfEiIiIyIhwKE07JkZERERGhI/ra8c5RkRERET5WDEiIiIyIhxK046JERERkRERdTqWZnjrGHEojYiIiCgfK0ZERERGhJOvtWNiREREZEQ4x0g7DqURERER5WPFiIiIyIgoOJamFRMjIiIiI8KhNO04lEZERESUjxUjIiIiI8KKkXYGXTGKjIxEvXr1YG9vD0dHR7Rt2xbx8fHK/ceOHUP16tVhbm6OoKAgbN++HYIgICYmRtknNjYWbdq0gbW1NVxcXNCtWzc8ePBAgrshIiJ6ewpR1NlmiAw6MUpPT0dYWBhOnTqFffv2QSaToX379lAoFHjy5AnatWuHKlWq4MyZM5g2bRrGjBmjcnxiYiIaNmyI6tWr4/Tp04iMjMS9e/fQsWNHie6IiIjo7YgK3W2FtXjxYnh5ecHc3ByBgYE4fPiw1v6HDh1CYGAgzM3N4e3tjaVLl77hXb8+gx5K+/jjj1W+/uGHH+Ds7IzY2FgcOXIEgiBgxYoVMDc3h7+/P+7cuYN+/fop+y9ZsgQ1a9bEjBkzlG2rVq2Cu7s7rl69ikqVKqldMzMzE5mZmSptOdklUMJUruO7IyIiKj42bdqE4cOHY/Hixahbty6WLVuG1q1bIzY2FuXKlVPrf+PGDbRp0wb9+vXDhg0bcPToUQwcOBClSpVS+/muSwZdMYqPj0fXrl3h7e0NW1tbeHl5AQASEhJw5coVVK1aFebm5sr+tWvXVjk+OjoaBw4cgLW1tXLz9fVVnluTiIgI2NnZqWyHfp2ppzskIiIqHFEUdbYVxpw5c9CnTx/07dsXfn5+mDdvHtzd3bFkyRKN/ZcuXYpy5cph3rx58PPzQ9++fdG7d2989913uvgYCmTQFaN27drB3d0dK1asQOnSpaFQKBAQEICsrCyIoghBUH353ct/yQqFAu3atcM333yjdm43NzeN1wwPD0dYWJhK29xfDfpjJiKiYkTxBkNgBdE0SiKXyyGXq46SZGVlITo6GmPHjlVpb9GiBY4dO6bx3MePH0eLFi1U2lq2bIkffvgB2dnZMDU11cEdqDPYilFKSgri4uIwYcIENG3aFH5+fnj06JFyv6+vL86fP6/yF3r69GmVc9SsWROXLl2Cp6cnKlSooLJZWVlpvK5cLoetra3KxmE0IiIyRJpGSSIiItT6PXjwALm5uXBxcVFpd3FxQVJSksZzJyUlaeyfk5Oj14egDDYxKlmyJBwdHbF8+XJcu3YN+/fvV6nkdO3aFQqFAv3790dcXBz27NmjLM+9qCQNGjQIDx8+RJcuXfDXX3/h+vXr2Lt3L3r37o3c3FxJ7ouIiOht6HIoLTw8HKmpqSpbeHh4gdfWNFLzctur+mtq1yWDTYxkMhl++uknREdHIyAgACNGjMC3336r3G9ra4sdO3YgJiYG1atXx/jx4zFx4kQAUM47Kl26NI4ePYrc3Fy0bNkSAQEBGDZsGOzs7CCTGexHR0REBkwh6m7TNEry8jAaADg5OcHExEStOpScnKxWFXrB1dVVY/8SJUrA0dFRdx/ISwx68kuzZs0QGxur0vbfeUQhISE4d+6c8uuNGzfC1NRUZXZ8xYoVsXXrVv0HS0REZKDMzMwQGBiIqKgotG/fXtkeFRWFDz/8UOMxwcHB2LFjh0rb3r17ERQUpLf5RYCBJ0avsm7dOnh7e6NMmTI4d+4cxowZg44dO8LCwkLq0IiIiPRClOglsmFhYejWrRuCgoIQHByM5cuXIyEhAaGhoQDyHl66c+cO1q1bBwAIDQ3F999/j7CwMPTr1w/Hjx/HDz/8gB9//FGvcRp1YpSUlISJEyciKSkJbm5u+PTTT/H1119LHRYREZHeSLVgdadOnZCSkoKpU6ciMTERAQEB2LVrFzw8PADkLaqckJCg7O/l5YVdu3ZhxIgRWLRoEUqXLo0FCxbodQ0jABDEwi5EQIX29U+GPVHbzdlE6hD0btXcQ1KHoHc9hjWUOgS90uUjyu+qsu/7SB2C3q0ZHCl1CHq3ea6XXs8/7ofMV3d6TTP6GN5T10ZdMSIiIjI2ComG0ooLJkZERERGhANF2jExIiIiMiJv8vJXY8LFeIiIiIjysWJERERkRBQcStOKiREREZER4Rwj7TiURkRERJSPFSMiIiIjwsf1tWNiREREZEQ4kqYdh9KIiIiI8rFiREREZESkeolsccHEiIiIyIjwcX3tOJRGRERElI8VIyIiIiPCoTTtmBgREREZESZG2jExIiIiMiLMi7TjHCMiIiKifKwYFYH2QfekDkGvckTD/zZSDG8odQh6l5kldQT6dfHiY6lD0Ls/BkdKHYLe9fy+ldQh6N/cK3o9PYfStDP8n2hERESkxJfIasehNCIiIqJ8rBgREREZEb5EVjsmRkREREaEQ2nacSiNiIiIKB8rRkREREaET6Vpx8SIiIjIiDAx0o5DaURERET5WDEiIiIyIgpOvtaKiREREZER4VCadkyMiIiIjAgf19eOc4yIiIiI8rFiREREZES48rV2TIyIiIiMCOcYacehNCIiIqJ8rBgREREZEU6+1o6JERERkRERFQqpQ3incSiNiIiIKB8rRkREREaET6Vpx8SIiIjIiHCOkXYcStPi5s2bEAQBMTExAICDBw9CEAQ8fvxY0riIiIhIP1gxKoSQkBAkJibCzs5O6lCIiIjeCNcx0o6JUSGYmZnB1dVV6jCIiIjeGBMj7YrlUNqWLVtQpUoVWFhYwNHREc2aNUN6ejp69uyJjz76CDNmzICLiwvs7e0xZcoU5OTk4Msvv4SDgwPKli2LVatWvdF1OZRGRETFnUJU6GwzRMWuYpSYmIguXbpg1qxZaN++PZ48eYLDhw8rJ5Pt378fZcuWxZ9//omjR4+iT58+OH78OBo0aICTJ09i06ZNCA0NRfPmzeHu7i7x3RAREdG7pFgmRjk5OejQoQM8PDwAAFWqVFHud3BwwIIFCyCTyeDj44NZs2bh2bNnGDduHAAgPDwcM2fOxNGjR9G5c2edx5eZmYnMzEyVtqzMTJjJ5Tq/FhERUWFxKE27YjeUVq1aNTRt2hRVqlTBp59+ihUrVuDRo0fK/ZUrV4ZM9u9tubi4qCROJiYmcHR0RHJysl7ii4iIgJ2dncq2Ytn3erkWERFRYYkKUWebISp2iZGJiQmioqKwe/du+Pv7Y+HChfDx8cGNGzcAAKampir9BUHQ2KbQ05Lo4eHhSE1NVdn6DRisl2sRERGRbhW7oTQgL7GpW7cu6tati4kTJ8LDwwPbtm2TOiwAgFwuh/ylYTMz+VOJoiEiIlLFBR61K3aJ0cmTJ7Fv3z60aNECzs7OOHnyJO7fvw8/Pz+cP39e6vCIiIjeafoaMTEUxW4ozdbWFn/++SfatGmDSpUqYcKECZg9ezZat24tdWhERESkA48ePUK3bt2Uc3W7deumdamc7OxsjBkzBlWqVIGVlRVKly6N7t274+7du4W+tiCypqZ3sdcK/xdTnOSIxa7wWGh/JThLHYLeZWZJHYF+Xbz4WOoQ9O7B3Uev7lTM9fy+ldQh6N372Vf0ev62/WJ1dq6dK/x1dq7/at26NW7fvo3ly5cDAPr37w9PT0/s2LFDY//U1FR88skn6NevH6pVq4ZHjx5h+PDhyMnJwenTpwt1bcP/iUZERERK4ju+MGNcXBwiIyNx4sQJvPfeewCAFStWIDg4GFeuXIGPj4/aMXZ2doiKilJpW7hwIWrXro2EhASUK1futa9f7IbSdGnGjBmwtrbWuHFojoiISLvMzEykpaWpbC+v5VdYx48fh52dnTIpAoA6derAzs4Ox44de+3zpKamQhAE2NvbF+r6Rl0xCg0NRceOHTXus7CwKOJoiIiI9E+X6w9FRERgypQpKm2TJk3C5MmT3/icSUlJcHZWn77g7OyMpKSk1zpHRkYGxo4di65du8LW1rZQ1zfqxMjBwQEODg5Sh0FERFRkdJkYhYeHIywsTKXt5SVrXpg8ebJaEvWyU6dOAchbludloihqbH9ZdnY2OnfuDIVCgcWLF7+y/8uMOjEiIiIyNrp8+aumtfsKMnjw4Fe+isvT0xPnz5/HvXv31Pbdv38fLi4uWo/Pzs5Gx44dcePGDezfv7/Q1SKAiREREREVAScnJzg5Ob2yX3BwMFJTU/HXX3+hdu3aAPLWMExNTUVISEiBx71Iiv7++28cOHAAjo6ObxSnUU++JiIiMjbv+rvS/Pz80KpVK/Tr1w8nTpzAiRMn0K9fP7Rt21bliTRfX1/lWy9ycnLwySef4PTp09i4cSNyc3ORlJSEpKQkZGUVbi0SVoyIiIiMiFgMVr7euHEjhg4dihYtWgAAPvjgA3z/veoL2a9cuYLU1FQAwO3bt/Hbb78BAKpXr67S78CBA2jUqNFrX5uJEREREb1THBwcsGHDBq19/rs+taenp87eAcfEiIiIyIjoawjMUDAxIiIiMiLv+srXUuPkayIiIqJ8rBgREREZEQWH0rRiYkRERGREisNTaVLiUBoRERFRPlaMiIiIjAifStOOiREREZER4VNp2jExIiIiMiKsGGnHOUZERERE+VgxIiIiMiJ8Ku0VRDIoGRkZ4qRJk8SMjAypQ9EbQ79HQ78/UeQ9GgJDvz9RNI57JHWCKOrorWv0TkhLS4OdnR1SU1Nha2srdTh6Yej3aOj3B/AeDYGh3x9gHPdI6jjHiIiIiCgfEyMiIiKifEyMiIiIiPIxMTIwcrkckyZNglwulzoUvTH0ezT0+wN4j4bA0O8PMI57JHWcfE1ERESUjxUjIiIionxMjIiIiIjyMTEiIiIiysfEiIiIiCgfEyMiIiKifEyMiIiIiPIxMTIwGRkZUodAb2jdunXIzMxUa8/KysK6deskiIjexLVr17Bnzx48f/4cAGCIK6IY2j2mpaWp/FnbRoaP6xgZAIVCga+//hpLly7FvXv3cPXqVXh7e+Orr76Cp6cn+vTpI3WIby09PR0zZ87Evn37kJycDIVCobL/+vXrEkWmOyYmJkhMTISzs7NKe0pKCpydnZGbmytRZG/ut99+e+2+H3zwgR4j0b+UlBR06tQJ+/fvhyAI+Pvvv+Ht7Y0+ffrA3t4es2fPljrEt2ao9/jff3symQyCIKj1EUURgiAUy3+HVDglpA6A3t706dOxdu1azJo1C/369VO2V6lSBXPnzjWIxKhv3744dOgQunXrBjc3N43/cRV3L/7jfdnt27dhZ2cnQURv76OPPlL5WhAElerCf++3uP/AGTFiBEqUKIGEhAT4+fkp2zt16oQRI0YU26Thvwz1Hvfv3w8HBwcAwIEDBySOhqTGxMgArFu3DsuXL0fTpk0RGhqqbK9atSouX74sYWS6s3v3bvz++++oW7eu1KHoXI0aNSAIAgRBQNOmTVGixL//LHNzc3Hjxg20atVKwgjf3H8re3/88QfGjBmDGTNmIDg4GIIg4NixY5gwYQJmzJghYZS6sXfvXuzZswdly5ZVaa9YsSL++ecfiaLSLUO9x4YNG2r8MxknJkYG4M6dO6hQoYJau0KhQHZ2tgQR6V7JkiWVv9EZmhdVlZiYGLRs2RLW1tbKfWZmZvD09MTHH38sUXS6M3z4cCxduhT16tVTtrVs2RKWlpbo378/4uLiJIzu7aWnp8PS0lKt/cGDBwbzri1Dvcfz58+/dt+qVavqMRJ6FzAxMgCVK1fG4cOH4eHhodK+efNm1KhRQ6KodGvatGmYOHEi1q5dq/E/5uJs0qRJAABPT0906tQJ5ubmEkekH/Hx8RqHBO3s7HDz5s2iD0jHGjRogHXr1mHatGkA8oYJFQoFvv32WzRu3Fji6HTDUO+xevXqasO8mnCOkXHg5GsDsGPHDnTr1g3h4eGYOnUqpkyZgitXrmDdunXYuXMnmjdvLnWIb61GjRqIj4+HKIrw9PSEqampyv4zZ85IFJnuZWVlaZxgXq5cOYki0o0GDRrA1NQUGzZsgJubGwAgKSkJ3bp1Q1ZWFg4dOiRxhG8nNjYWjRo1QmBgIPbv348PPvgAly5dwsOHD3H06FGUL19e6hDfmqHeY2GGAV/+BZQMDxMjA7Fnzx7MmDED0dHRUCgUqFmzJiZOnIgWLVpIHZpOTJkyRev+F1WX4uzvv/9G7969cezYMZV2Q3ka5tq1a2jfvj2uXLmiTPISEhJQqVIlbN++XeNwcHGTlJSEJUuWqPw7HDRokDIRNATGcI+v4/3338fKlSuN7r6NARMjondE3bp1UaJECYwdO1bjk3fVqlWTKDLdEUURUVFRuHz5MkRRhL+/P5o1a2aQTxmSYbOxscG5c+fg7e0tdSikY0yMDMzTp0/VhmBsbW0likb3oqOjERcXB0EQ4O/vbzBzqADAysoK0dHR8PX1lToUvcvIyIBcLi/2CZGxTdot6H4FQYC5uTnKlStXrCdhFwYTI8PFydcG4MaNGxg8eDAOHjyosvK1oQzBAEBycjI6d+6MgwcPwt7eHqIoIjU1FY0bN8ZPP/2EUqVKSR3iW/P398eDBw+kDkNvDHEhUmObtPvifoF/V7v+b3JramqKTp06YdmyZQb7EAEZPiZGBuCzzz4DAKxatQouLi7F/rdwTYYMGYK0tDRcunRJubBcbGwsevTogaFDh+LHH3+UOMK3980332D06NGYMWMGqlSpojbBvLhX/gxxIdIbN25IHUKR2rZtG8aMGYMvv/wStWvXhiiKOHXqFGbPno1JkyYhJycHY8eOxYQJE/Ddd99JHS7RmxGp2LOyshIvX74sdRh6ZWtrK/71119q7SdPnhTt7OyKPiA9EARBFARBlMlkKtuLtuKufPny4h9//CGKoihaW1uL8fHxoiiKYlxcnGhvby9laPSaatWqJUZGRqq1R0ZGirVq1RJFURS3bdsment7F3VoRe6/38NkWFgxMgC1atXCrVu34OPjI3UoeqNQKNQqKEBe6f7lOVXFlaG/isAYFiIF8iqZCQkJyMrKUmkv7u+CA4ALFy5ofFzdw8MDFy5cAJA33JaYmFjUoRHpDBMjA7By5UqEhobizp07CAgIUEsgDGHSZ5MmTTBs2DD8+OOPKF26NIC8H7QjRoxA06ZNJY5ONwz9VQSGvhDp9evX0b59e1y4cEFl3tGLoW1DmGPk6+uLmTNnYvny5TAzMwMAZGdnY+bMmcqHBu7cuQMXFxcpwywS48aNM9jV+I0dEyMDcP/+fcTHx6NXr17Kthf/MRvKpM/vv/8eH374ITw9PeHu7g5BEJCQkIAqVapgw4YNUoenM4cPH8ayZctw/fp1bN68GWXKlMH69evh5eWl8iqN4mjSpEno1q0b7ty5A4VCga1bt6osRFrcDRs2DF5eXvjjjz/g7e2Nv/76CykpKRg5cqTBzLdZtGgRPvjgA5QtWxZVq1aFIAg4f/48cnNzlX+H169fx8CBAyWO9O3cuXMHR48e1bjQ6tChQwEA4eHhUoRGRYCP6xsAf39/+Pn5YfTo0RonXxvSSq2a1sAxFL/88gu6deuGzz77DOvXr0dsbCy8vb2xePFi7Ny5E7t27ZI6xLdmyAuROjk5Yf/+/ahatSrs7Ozw119/wcfHB/v378fIkSNx9uxZqUPUiadPn2LDhg24evUqRFGEr68vunbtChsbG6lD04nVq1cjNDQUZmZmcHR0VPn/VBAEXL9+XcLoqCgwMTIAVlZWOHfunEGsHGzMatSogREjRqB79+4qa6TExMSgVatWSEpKkjpE0qJkyZKIjo6Gt7c3ypcvj5UrV6Jx48aIj49HlSpV8OzZM6lD1BlDnkfl7u6O0NBQhIeHQyaTSR0OSYBDaQagSZMmBpkYLViwAP3794e5uTkWLFigte+L8nZxduXKFTRo0ECt3dbWFo8fPy76gKhQAgICcP78eXh7e+O9997DrFmzYGZmhuXLlxvMIoCa5lH9t6JiCMP2z549Q+fOnZkUGTEmRgagXbt2GDFiBC5cuKBx/Zvi+lvc3Llz8dlnn8Hc3Bxz584tsJ8gCAaRGLm5ueHatWvw9PRUaT9y5Eix/cHq4OCAq1evwsnJCSVLltS6xtbDhw+LMDLdmzBhAtLT0wHkrdnUtm1b1K9fH46Ojti0aZPE0enGy/OoTp48iYcPHxrUPKo+ffpg8+bNGDt2rNShkEQ4lGYAtP1mYyiTr43BrFmzsHbtWqxatQrNmzfHrl278M8//2DEiBGYOHEiBg8eLHWIhbZ27Vp07twZcrkca9eu1dq3R48eRRRV0Xn48OErE8LixBjmUeXm5qJt27Z4/vy5xl8058yZI1FkVFRYMTIAhrKOjzZTp07FqFGjYGlpqdL+/PlzfPvtt5g4caJEkenO6NGjla85ycjIQIMGDSCXyzFq1KhimRQB/yY7OTk5AICWLVvC1dVVypCKlKE9zp2bmwtra2sAeUnS3bt34ePjAw8PD1y5ckXi6HRjxowZ2LNnj3JduJcnX5PhY8WIigUTExMkJibC2dlZpT0lJQXOzs7FviqWm5uLI0eOoEqVKjA3N0dsbCwUCgX8/f2VP4iKO0tLS8TFxRnUU5L/lZGRgYULF+LAgQMaH/M+c+aMRJHpTv369TFy5Eh89NFH6Nq1Kx49eoQJEyZg+fLliI6OxsWLF6UO8a2VLFkSc+fORc+ePaUOhSTCipGBOHToEL777jvlm+f9/Pzw5Zdfon79+lKHphMvT/J84dy5cwbxW7mJiQlatmyJuLg4ODg4ICgoSOqQdO69997D2bNnDTYx6t27N6KiovDJJ5+gdu3aBlldMIZ5VHK5HHXr1pU6DJIQK0YGYMOGDejVqxc6dOiAunXrQhRFHDt2DNu2bcOaNWvQtWtXqUN8Yy/mZ6SmpsLW1lbtCZinT58iNDQUixYtkjBK3ahVqxZmzpxpMCt5v+zFhNYRI0YgMDAQVlZWKvuL+wrtdnZ22LVrl9H9UDW0eVQRERFITEx85ZOwZLiYGBkAPz8/9O/fHyNGjFBpnzNnDlasWIG4uDiJInt7a9euhSiK6N27N+bNmwc7OzvlPjMzM3h6eiI4OFjCCHVn7969GDNmDKZNm6YxcbC1tZUoMt3Q9JCAIa3Q7u/vj59++qnYJ3jGrn379ti/fz8cHR1RuXJltcnXW7dulSgyKipMjAyAXC7HpUuX1NYxunbtGgICApCRkSFRZLpz6NAhhISEaHyRrKH4b+Lw39++DSVx+Oeff7TuL+5DbLt378aCBQuwdOnSYn8vxuy/r1bSZPXq1UUUCUmFc4wMgLu7O/bt26eWGO3btw/u7u4SRaVb/33B6vPnz9Xexl7cqykAcODAAalD0Jvs7Gw0btwYO3fuhL+/v9Th6EVQUBAyMjLg7e0NS0tLtSS+uK/TZCwWL14MhUKhrNjevHkT27dvh5+fH1q2bClxdFQUmBgZgJEjR2Lo0KGIiYlBSEgIBEHAkSNHsGbNGsyfP1/q8HTi2bNnGD16NH7++WekpKSo7S/u1RRANfkzNKampsjMzDSYeSiadOnSBXfu3MGMGTM0vrOQiocPP/wQHTp0QGhoKB4/fow6derA1NQUDx48wJw5c/DFF19IHSLpGYfSDMS2bdswe/Zs5XyiF0+lffjhhxJHphuDBg3CgQMHMHXqVHTv3h2LFi3CnTt3sGzZMsycOROfffaZ1CHqzLNnzzS+h6q4z12ZOXMmLl++jJUrV6JECcP7nczS0hLHjx9HtWrVpA6F3oKTkxMOHTqEypUrY+XKlVi4cCHOnj2LX375BRMnTizWczbp9Rje/05Gqn379mjfvr3UYejNjh07sG7dOjRq1Ai9e/dG/fr1UaFCBXh4eGDjxo0GkRjdv38fvXr1wu7duzXuL+5VsZMnT2Lfvn3Yu3cvqlSpoja5vLhPavX19cXz58+lDoPe0rNnz2BjYwMg74GIDh06QCaToU6dOq+cJ0eGgW/JMwCnTp3CyZMn1dpPnjyJ06dPSxCR7j18+BBeXl4A8uYTvZivUa9ePfz5559ShqYzw4cPx6NHj3DixAlYWFggMjISa9euRcWKFfHbb79JHd5bs7e3x8cff4yWLVuidOnSsLOzU9mKu5kzZ2LkyJE4ePAgUlJSkJaWprJR8VChQgVs374dt27dwp49e9CiRQsAQHJyskHMZaTXIFKxV6tWLXHz5s1q7b/88otYu3ZtCSLSvSpVqogHDx4URVEUmzdvLo4cOVIURVGcP3++WKZMGSlD0xlXV1fx5MmToiiKoo2NjXjlyhVRFEXx119/FevWrStlaPQaBEEQBUEQZTKZyvaijYqHzZs3i6ampqJMJhObN2+ubJ8xY4bYqlUrCSOjosKhNAMQGxuLmjVrqrXXqFEDsbGxEkSke7169cK5c+fQsGFDhIeH4/3338fChQuRk5NjMC91TE9PV77yxMHBAffv30elSpVQpUoVg3idhKEz5KcKjcknn3yCevXqITExUWW+WNOmTQ16ugL9i4mRAZDL5bh37x68vb1V2hMTEw1mkut/F69s3LgxLl++jNOnT6N8+fIGM9nVx8cHV65cgaenJ6pXr45ly5bB09MTS5cuhZubm9Th6cSWLVvw888/a5xcXtyTP0N+qtDYuLq6qr3suHbt2hJFQ0WNc4wMQPPmzREeHo7U1FRl2+PHjzFu3Dg0b95cwsj0p1y5cujQoYPBJEVA3hyjxMREAMCkSZMQGRkJd3d3zJ8/HzNmzJA4ure3YMEC9OrVC87Ozjh79ixq164NR0dHXL9+Ha1bt5Y6PJ04fPgwPv/8c4SEhODOnTsAgPXr1+PIkSMSR0ZEr4uP6xuAO3fuoEGDBkhJSUGNGjUAADExMXBxcUFUVJRBLPI4dOhQVKhQAUOHDlVp//7773Ht2jXMmzdPmsD0RBRFPH/+HJcvX0a5cuXg5OQkdUhvzdfXF5MmTUKXLl1gY2ODc+fOwdvbGxMnTsTDhw/x/fffSx3iW/nll1/QrVs3fPbZZ1i/fj1iY2Ph7e2NxYsXY+fOndi1a5fUIRLRa2DFyACUKVMG58+fx6xZs+Dv74/AwEDMnz8fFy5cMIikCMj7oaPp5ZwhISHYsmWLBBHpxw8//ICAgACYm5ujZMmS6N69O7Zv3y51WDqRkJCAkJAQAICFhQWePHkCAOjWrRt+/PFHKUPTienTp2Pp0qVYsWKFyqrXISEhxX6YkMiYGMYEFIKVlRX69+8vdRh6k5KSovGRbltbWzx48ECCiHTvq6++wty5czFkyBDli3GPHz+OESNG4ObNm5g+fbrEEb4dV1dXpKSkwMPDAx4eHjhx4gSqVauGGzduwBAK11euXEGDBg3U2m1tbfH48eOiD4iI3ggTIwNx9epVHDx4EMnJyVAoFCr7Jk6cKFFUulOhQgVERkZi8ODBKu27d+9Wm3ReXC1ZsgQrVqxAly5dlG0ffPABqlatiiFDhhT7xKhJkybYsWMHatasiT59+mDEiBHYsmULTp8+jQ4dOkgd3ltzc3PDtWvX4OnpqdJ+5MgRg/keJTIGTIwMwIoVK/DFF1/AyckJrq6uKu9oEgTBIBKjsLAwDB48GPfv30eTJk0A5L0kd/bs2QYzvyg3NxdBQUFq7YGBgcjJyZEgIt1avny5MmkPDQ2Fo6MjDh8+jHbt2hnE+6cGDBiAYcOGYdWqVRAEAXfv3sXx48cxatQog/g3SGQsOPnaAHh4eGDgwIEYM2aM1KHo1ZIlS/D111/j7t27AABPT09MnjwZ3bt3lzgy3RgyZAhMTU3V1mUaNWoUnj9/jkWLFkkUme5kZGTg/PnzapVNQRDQrl07CSN7M+fPn0dAQABksrzpmuPHj8fcuXORkZEBIG8pjVGjRmHatGlShklEhcDEyADY2toiJibGaMr19+/fh4WFBaytraUORaeGDBmCdevWwd3dHXXq1AEAnDhxArdu3UL37t1VJvQWx0UtIyMj0a1bN6SkpKjtEwShWL4LzsTEBImJiXB2doa3tzdOnToFc3NzxMXFQaFQwN/f3+C+T4kMHRMjA9CnTx/UqlULoaGhUodCb6Fx48av1U8QBOzfv1/P0ehehQoV0LJlS0ycOBEuLi5Sh6MTjo6O2LVrF9577z3IZDLcu3cPpUqVkjosInoLnGNkACpUqICvvvoKJ06cQJUqVVQqCwDU1v4pjry8vFTmTr3s+vXrRRiNfhj6KyWSk5MRFhZmMEkRAHz88cdo2LAh3NzcIAgCgoKCYGJiorGvIXyPEhkDVowMwIu3zmsiCIJB/Ic8f/58la+zs7Nx9uxZREZG4ssvv8TYsWMlioxeV+/evVG3bl306dNH6lB0KjIyEteuXcPQoUMxdepU2NjYaOw3bNiwIo6MiN4EEyMq1hYtWoTTp09j9erVUodCr/Ds2TN8+umnKFWqlEFWNnv16oUFCxYUmBgRUfHAxKiYCgsLw7Rp02BlZYWwsLAC+wmCgNmzZxdhZEXr+vXrqF69OtLS0qQOhV5h5cqVCA0NhYWFBRwdHdWWlTCEyiYRFX+cY1RMnT17FtnZ2co/F0TbvBxDsGXLFjg4OEgdBr2GCRMmYOrUqRg7dqzy8XYioncNK0ZULNSoUUMlyRNFEUlJSbh//z4WL15s0K9DMRQODg44deoUypcvL3UoREQFYsWIioWPPvpI5WuZTIZSpUqhUaNG8PX1lSYoKpQePXpg06ZNGDdunNShEBEViBUjIioSQ4cOxbp161CtWjVUrVpVbfJ1cVy0kogMDxMjemcVZkK1ra2tHiMhXdC2gGVxXbSSiAwPEyN6Z8lksteePF4cXydBRETvHs4xonfWf1eCvnnzJsaOHYuePXsiODgYAHD8+HGsXbsWERERUoVIREQGhhUjKhaaNm2Kvn37okuXLirt//vf/7B8+XIcPHhQmsCIiMigMDGiYsHS0hLnzp1DxYoVVdqvXr2K6tWr49mzZxJFRkREhoSrrFGx4O7ujqVLl6q1L1u2DO7u7hJEREREhohzjKhYmDt3Lj7++GPs2bMHderUAQCcOHEC165dw9atWyWOjoiIDAWH0qjYuH37NpYsWYK4uDiIogh/f3+EhoayYkRERDrDihEVGzdu3MDNmzeRmJiILVu2oEyZMli/fj28vLxQr149qcMjIiIDwDlGVCz88ssvaNmyJSwtLXH27FlkZmYCAJ48eYIZM2ZIHB0RERkKJkZULEyfPh1Lly7FihUrVF4lERISgjNnzkgYGRERGRImRlQsXLlyBQ0aNFBrt7W1xePHj4s+ICIiMkhMjKhYcHNzw7Vr19Tajxw5Am9vbwkiIiIiQ8TEiIqFAQMGYNiwYTh58iQEQcDdu3exceNGjBo1CgMHDpQ6PCIiMhB8XJ+KjfHjx2Pu3LnIyMgAAMjlcowaNQrTpk2TODIiIjIUTIyoWHn27BliY2OhUCjg7+8Pa2trqUMiIiIDwsSIiIiIKB/nGBERERHlY2JERERElI+JEREREVE+JkZERERE+ZgYEREREeVjYkRERESUj4kRERERUb7/A8dCvolwTdBWAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "correlation_matrix = ss.corr()\n",
    "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\")\n",
    "plt.title(\"Correlation Matrix\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "996e2c5d-db98-45fb-af07-84be966fa0ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "ss.reset_index(drop=True, inplace=True)\n",
    "ss.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "71020f5d-bac6-4dff-af7b-371a2cdda7b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = ss['sm_li'].reset_index(drop=True).dropna()\n",
    "x = ss.drop('sm_li',axis=1).reset_index(drop=True).dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "962fbbec-b6a5-40a4-bd5e-4798dda9482e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1260, 6)\n",
      "(1260,)\n"
     ]
    }
   ],
   "source": [
    "print(x.shape)\n",
    "print(y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "6ac3ed90-2e17-4b9b-8a44-39c9102dc6ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=123)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a54d48b-7e67-41f1-bd5d-86960009e7bf",
   "metadata": {},
   "source": [
    "## The new objects are: the dataframe y, the dataframe x, x_train, x_test, y_train, y_test\n",
    "\n",
    "### the dataframe 'y'\n",
    "\n",
    "y is the dataframe that consists of only the variable that you are attempting to predict, in this case, it is the column 'sm_li'\n",
    "\n",
    "### the dataframe 'x'\n",
    "\n",
    "x is the dataframe that consists of all variables other than the variable youy are attempting to predict\n",
    "\n",
    "### x_train\n",
    "\n",
    "x_train is a subset of the x dataframe that consists of 80% of the instances, used to attempt to identify the weights that the variables may impact the target variable\n",
    "\n",
    "### x_test\n",
    "\n",
    "x_test is a subset of the x dataframe that consists of 20% of the instances, used to assess the validity of your model on data that has not been used to train the model\n",
    "\n",
    "### y_train\n",
    "\n",
    "y_train is a subset of the y dataframe that consists of 80% of the instances, used to attempt to identify the weights that the variables may impact the target variable\n",
    "\n",
    "### y_test\n",
    "y_test is a subset of the y dataframe that consists of 20% of the instances, used to assess the validity of your model on data that has not been used to train the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "9635af63-f4b8-4b7f-b219-2c63fa7a4a88",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "90216401-39f6-4382-863b-6bfeae0cab47",
   "metadata": {},
   "outputs": [],
   "source": [
    "logreg_model = LogisticRegression(class_weight='balanced', random_state=123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "37a39797-7dd3-4571-8344-050816728a21",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(class_weight=&#x27;balanced&#x27;, random_state=123)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(class_weight=&#x27;balanced&#x27;, random_state=123)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(class_weight='balanced', random_state=123)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logreg_model.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "2009ed10-a8db-49c9-9dfa-2bcd2e41eea4",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score, confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "0ec78f1e-60d2-437b-b364-ff60afa17936",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = logreg_model.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "d8b8704c-c1e5-448e-9b4c-0631c2e7fdfe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Accuracy: 0.6984\n"
     ]
    }
   ],
   "source": [
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f'Model Accuracy: {accuracy:.4f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "8422ec9d-8287-478e-b8cb-29c3a8d2f6ed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Confusion Matrix:\n",
      "[[112  55]\n",
      " [ 21  64]]\n"
     ]
    }
   ],
   "source": [
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "print('\\nConfusion Matrix:')\n",
    "print(conf_matrix)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07a5455b-333c-4cad-8974-267fc508625b",
   "metadata": {},
   "source": [
    "## Interprit the confusion matrix\n",
    "\n",
    "### True Negative: 112\n",
    "#### the model correctly predicted 112 of the instances where the subject was not on linkedin.\n",
    "### False Positive: 55\n",
    "#### the model incorrectly predicted 55 of the instances where the subject was not on linkedin but the model incorrectly said that they were.\n",
    "### False Negative: 21\n",
    "#### the model incorrectly predicted 21 of the instances where the subject was on linkedin but the model incorrectly said that they were not.\n",
    "### True Positive: 64\n",
    "#### the model correctly predicted 64 of the instances where the subject was on linkedin and the model correltly said that they were.\n",
    "\n",
    "## The ratio is (True + True)/(total) or 176/252 or 69.8% correct"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "3b8696a0-1ab2-4a91-822a-f44613c5b02f",
   "metadata": {},
   "outputs": [],
   "source": [
    "conf_matrix_ss = pd.DataFrame(conf_matrix, \n",
    "                              index=['Actual Negative', 'Actual Positive'], \n",
    "                              columns=['Predicted Negative', 'Predicted Positive'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "4eed48ea-701a-45c1-94e4-eb521ccccb4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Confusion Matrix:\n",
      "                 Predicted Negative  Predicted Positive\n",
      "Actual Negative                 112                  55\n",
      "Actual Positive                  21                  64\n"
     ]
    }
   ],
   "source": [
    "print('\\nConfusion Matrix:')\n",
    "print(conf_matrix_ss)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df1f3717-ddaa-4c39-a8ae-32bcff9bb73f",
   "metadata": {},
   "source": [
    "## Precision\n",
    "\n",
    "\n",
    "$$\n",
    "\\frac{True Positive}{True Positive + False Positive}\n",
    "$$\n",
    "$$\n",
    "\\frac{64}{64 + 55}\\ = 53.7\n",
    "$$\n",
    "\n",
    "## Recall\n",
    "\n",
    "$$\n",
    "\\frac{True Positive}{True Positive + False Negative}\n",
    "$$\n",
    "$$\n",
    "\\frac{64}{64 + 21}\\ = 75.2\n",
    "$$\n",
    "\n",
    "\n",
    "## F1\n",
    "\n",
    "$$\n",
    "2(\\frac{Precision(Recall)}{Precision + Recall})\n",
    "$$\n",
    "$$\n",
    "\\frac{53.7(75.2)}{53.7 + 75.2}\\ = 62.7\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "3d0b3452-0dfb-4d53-85e3-7651ec5e81dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Precision: 0.5378\n",
      "Recall: 0.7529\n",
      "F1 Score: 0.6275\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.67      0.75       167\n",
      "           1       0.54      0.75      0.63        85\n",
      "\n",
      "    accuracy                           0.70       252\n",
      "   macro avg       0.69      0.71      0.69       252\n",
      "weighted avg       0.74      0.70      0.71       252\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "\n",
    "precision = conf_matrix[1, 1] / (conf_matrix[1, 1] + conf_matrix[0, 1])\n",
    "recall = conf_matrix[1, 1] / (conf_matrix[1, 1] + conf_matrix[1, 0])\n",
    "f1_score = 2 * (precision * recall) / (precision + recall)\n",
    "\n",
    "# Display calculated metrics\n",
    "print(f'\\nPrecision: {precision:.4f}')\n",
    "print(f'Recall: {recall:.4f}')\n",
    "print(f'F1 Score: {f1_score:.4f}')\n",
    "\n",
    "# Use scikit-learn's classification_report for validation\n",
    "class_report = classification_report(y_test, y_pred)\n",
    "print('\\nClassification Report:')\n",
    "print(class_report)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "760a6b59-1756-46ed-91e3-601c8ad78689",
   "metadata": {},
   "outputs": [],
   "source": [
    "TestA = [8, 7, 0, 1, 1, 42]\n",
    "TestB = [8, 7, 0, 1, 1, 82]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "afab237f-d361-421e-ba34-9476b25c2735",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Probability of LinkedIn use for the 42 Year Old: 0.7182\n",
      "Probability of LinkedIn use for the 82 Year Old: 0.4842\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\tarek\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:464: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n",
      "  warnings.warn(\n",
      "C:\\Users\\tarek\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:464: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "prob1 = logreg_model.predict_proba([TestA])\n",
    "prob2 = logreg_model.predict_proba([TestB])\n",
    "\n",
    "prob1_class1 = prob1[0, 1]\n",
    "prob2_class1 = prob2[0, 1]\n",
    "\n",
    "print(f'\\nProbability of LinkedIn use for the 42 Year Old: {prob1_class1:.4f}')\n",
    "print(f'Probability of LinkedIn use for the 82 Year Old: {prob2_class1:.4f}')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

